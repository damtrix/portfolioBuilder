/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateHomeArgs } from "./CreateHomeArgs";
import { UpdateHomeArgs } from "./UpdateHomeArgs";
import { DeleteHomeArgs } from "./DeleteHomeArgs";
import { HomeCountArgs } from "./HomeCountArgs";
import { HomeFindManyArgs } from "./HomeFindManyArgs";
import { HomeFindUniqueArgs } from "./HomeFindUniqueArgs";
import { Home } from "./Home";
import { User } from "../../user/base/User";
import { HomeService } from "../home.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Home)
export class HomeResolverBase {
  constructor(
    protected readonly service: HomeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Home",
    action: "read",
    possession: "any",
  })
  async _homesMeta(
    @graphql.Args() args: HomeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Home])
  @nestAccessControl.UseRoles({
    resource: "Home",
    action: "read",
    possession: "any",
  })
  async homes(@graphql.Args() args: HomeFindManyArgs): Promise<Home[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Home, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Home",
    action: "read",
    possession: "own",
  })
  async home(@graphql.Args() args: HomeFindUniqueArgs): Promise<Home | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Home)
  @nestAccessControl.UseRoles({
    resource: "Home",
    action: "create",
    possession: "any",
  })
  async createHome(@graphql.Args() args: CreateHomeArgs): Promise<Home> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Home)
  @nestAccessControl.UseRoles({
    resource: "Home",
    action: "update",
    possession: "any",
  })
  async updateHome(@graphql.Args() args: UpdateHomeArgs): Promise<Home | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Home)
  @nestAccessControl.UseRoles({
    resource: "Home",
    action: "delete",
    possession: "any",
  })
  async deleteHome(@graphql.Args() args: DeleteHomeArgs): Promise<Home | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldUser(@graphql.Parent() parent: Home): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
