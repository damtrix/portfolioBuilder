/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UserService } from "../user.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserCreateInput } from "./UserCreateInput";
import { UserWhereInput } from "./UserWhereInput";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserUpdateInput } from "./UserUpdateInput";
import { User } from "./User";
import { PortfolioFindManyArgs } from "../../portfolio/base/PortfolioFindManyArgs";
import { Portfolio } from "../../portfolio/base/Portfolio";
import { PortfolioWhereUniqueInput } from "../../portfolio/base/PortfolioWhereUniqueInput";
import { TechnicalSkillFindManyArgs } from "../../technicalSkill/base/TechnicalSkillFindManyArgs";
import { TechnicalSkill } from "../../technicalSkill/base/TechnicalSkill";
import { TechnicalSkillWhereUniqueInput } from "../../technicalSkill/base/TechnicalSkillWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserControllerBase {
  constructor(
    protected readonly service: UserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async create(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.create({
      data: {
        ...data,

        homes: data.homes
          ? {
              connect: data.homes,
            }
          : undefined,
      },
      select: {
        aboutMe: true,
        createdAt: true,
        email: true,
        firstName: true,
        githubLink: true,

        homes: {
          select: {
            id: true,
          },
        },

        id: true,
        image: true,
        lastName: true,
        linkedinLink: true,
        message: true,
        roles: true,
        speciality: true,
        twitterLink: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findMany(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        aboutMe: true,
        createdAt: true,
        email: true,
        firstName: true,
        githubLink: true,

        homes: {
          select: {
            id: true,
          },
        },

        id: true,
        image: true,
        lastName: true,
        linkedinLink: true,
        message: true,
        roles: true,
        speciality: true,
        twitterLink: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async findOne(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        aboutMe: true,
        createdAt: true,
        email: true,
        firstName: true,
        githubLink: true,

        homes: {
          select: {
            id: true,
          },
        },

        id: true,
        image: true,
        lastName: true,
        linkedinLink: true,
        message: true,
        roles: true,
        speciality: true,
        twitterLink: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async update(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          homes: data.homes
            ? {
                connect: data.homes,
              }
            : undefined,
        },
        select: {
          aboutMe: true,
          createdAt: true,
          email: true,
          firstName: true,
          githubLink: true,

          homes: {
            select: {
              id: true,
            },
          },

          id: true,
          image: true,
          lastName: true,
          linkedinLink: true,
          message: true,
          roles: true,
          speciality: true,
          twitterLink: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async delete(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          aboutMe: true,
          createdAt: true,
          email: true,
          firstName: true,
          githubLink: true,

          homes: {
            select: {
              id: true,
            },
          },

          id: true,
          image: true,
          lastName: true,
          linkedinLink: true,
          message: true,
          roles: true,
          speciality: true,
          twitterLink: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/portfolios")
  @ApiNestedQuery(PortfolioFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Portfolio",
    action: "read",
    possession: "any",
  })
  async findManyPortfolios(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Portfolio[]> {
    const query = plainToClass(PortfolioFindManyArgs, request.query);
    const results = await this.service.findPortfolios(params.id, {
      ...query,
      select: {
        category: true,
        createdAt: true,
        GithubUrl: true,
        id: true,
        image: true,
        info: true,
        liveUrl: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/portfolios")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectPortfolios(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PortfolioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      portfolios: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/portfolios")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updatePortfolios(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PortfolioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      portfolios: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/portfolios")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectPortfolios(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: PortfolioWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      portfolios: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/technicalSkills")
  @ApiNestedQuery(TechnicalSkillFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "TechnicalSkill",
    action: "read",
    possession: "any",
  })
  async findManyTechnicalSkills(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<TechnicalSkill[]> {
    const query = plainToClass(TechnicalSkillFindManyArgs, request.query);
    const results = await this.service.findTechnicalSkills(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        url: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/technicalSkills")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectTechnicalSkills(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TechnicalSkillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      technicalSkills: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/technicalSkills")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateTechnicalSkills(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TechnicalSkillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      technicalSkills: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/technicalSkills")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectTechnicalSkills(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: TechnicalSkillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      technicalSkills: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
