/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTechnicalSkillArgs } from "./CreateTechnicalSkillArgs";
import { UpdateTechnicalSkillArgs } from "./UpdateTechnicalSkillArgs";
import { DeleteTechnicalSkillArgs } from "./DeleteTechnicalSkillArgs";
import { TechnicalSkillCountArgs } from "./TechnicalSkillCountArgs";
import { TechnicalSkillFindManyArgs } from "./TechnicalSkillFindManyArgs";
import { TechnicalSkillFindUniqueArgs } from "./TechnicalSkillFindUniqueArgs";
import { TechnicalSkill } from "./TechnicalSkill";
import { User } from "../../user/base/User";
import { TechnicalSkillService } from "../technicalSkill.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TechnicalSkill)
export class TechnicalSkillResolverBase {
  constructor(
    protected readonly service: TechnicalSkillService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TechnicalSkill",
    action: "read",
    possession: "any",
  })
  async _technicalSkillsMeta(
    @graphql.Args() args: TechnicalSkillCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TechnicalSkill])
  @nestAccessControl.UseRoles({
    resource: "TechnicalSkill",
    action: "read",
    possession: "any",
  })
  async technicalSkills(
    @graphql.Args() args: TechnicalSkillFindManyArgs
  ): Promise<TechnicalSkill[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TechnicalSkill, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TechnicalSkill",
    action: "read",
    possession: "own",
  })
  async technicalSkill(
    @graphql.Args() args: TechnicalSkillFindUniqueArgs
  ): Promise<TechnicalSkill | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TechnicalSkill)
  @nestAccessControl.UseRoles({
    resource: "TechnicalSkill",
    action: "create",
    possession: "any",
  })
  async createTechnicalSkill(
    @graphql.Args() args: CreateTechnicalSkillArgs
  ): Promise<TechnicalSkill> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        users: args.data.users
          ? {
              connect: args.data.users,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TechnicalSkill)
  @nestAccessControl.UseRoles({
    resource: "TechnicalSkill",
    action: "update",
    possession: "any",
  })
  async updateTechnicalSkill(
    @graphql.Args() args: UpdateTechnicalSkillArgs
  ): Promise<TechnicalSkill | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          users: args.data.users
            ? {
                connect: args.data.users,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TechnicalSkill)
  @nestAccessControl.UseRoles({
    resource: "TechnicalSkill",
    action: "delete",
    possession: "any",
  })
  async deleteTechnicalSkill(
    @graphql.Args() args: DeleteTechnicalSkillArgs
  ): Promise<TechnicalSkill | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "users",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldUsers(
    @graphql.Parent() parent: TechnicalSkill
  ): Promise<User | null> {
    const result = await this.service.getUsers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
